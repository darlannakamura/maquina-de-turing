/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Automato.visual;

import Grafos.desenho.Edge;
import Grafos.desenho.Fita;
import Grafos.desenho.Graph;
import Grafos.desenho.Transicao;
import Grafos.desenho.Vertex;
import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.TrayIcon;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Darlan Nakamura
 */
public class View extends javax.swing.JFrame {

    public DefaultTableModel model;
    public ViewPanel view;
    private Graph graph;
    private int select = 0;
    private int contador;
    private int incr = 0;
    private String path;
    private AbrirArquivo aa;
    private Fita fita;

    //Select 0 : Movimentar
    //Select 1 : Estados
    //Select 2 : Transições
    //Select 3 : Apagar
    //Select 4 : Inicial
    //Select 5 : Final
    /**
     * Creates new form Main
     */
    public View() {
        this.view = new ViewPanel();
        graph = new Graph();
        initComponents();
        //jPanel1.setVisible(false);
        contador = 0;
        
     
        this.view.addMouseMotionListener(new Mouse());
        this.view.addMouseListener(new EventoMouse());
        jButton5.setVisible(false);
        //this.jFileChooser1.setVisible(false);

        path = "";
        jMenuItem8.setEnabled(false);

        jTextPane1.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editmodel = jTable1.getModel();or.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        respostaText = new javax.swing.JLabel();
        painel = new javax.swing.JScrollPane(this.view);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Inicial = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        painel.setBackground(new java.awt.Color(255, 255, 255));
        painel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                painelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                painelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelMouseClicked(evt);
            }
        });

        jButton1.setText("Mover");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add Estados");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add Transições");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Apagar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Inicial.setText("Inicial");
        Inicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InicialActionPerformed(evt);
            }
        });

        jButton6.setText("Final");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setText("Próximo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText("FITA:");

        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1075, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jMenu1.setText("Arquivo");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Abrir Arquivo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Salvar Como");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Salvar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Salvar imagem");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Teste");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Teste Rápido");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Teste Passo a Passo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Múltiplas Entradas");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(Inicial)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(respostaText, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(Inicial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addGap(62, 62, 62)
                        .addComponent(jButton5))
                    .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(respostaText)
                        .addContainerGap(52, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        select = 1;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        select = 0;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        select = 2;
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        select = 3;
    }//GEN-LAST:event_jButton4ActionPerformed


    private void InicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InicialActionPerformed
        select = 4;
    }//GEN-LAST:event_InicialActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        select = 5;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        FileSystemView fsv = FileSystemView.getFileSystemView();
        JFileChooser dialog = new JFileChooser();
        dialog.setMultiSelectionEnabled(false);
        dialog.setDialogTitle("Salvar imagem");

        dialog.setCurrentDirectory(fsv.getRoots()[0]);
        int result = dialog.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = dialog.getSelectedFile().getAbsolutePath();
                if (!filename.contains(".png")) {
                    filename = filename.concat(".png");
                }
                this.view.saveToPngImageFile(filename);
            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String input = JOptionPane.showInputDialog(null, "Digite a entrada:");
        
        fita = new Fita(input);
        
        boolean resposta = graph.execucaoRapida(fita);
         printarFita();
          if (resposta) {
                jTextPane1.setForeground(Color.GREEN);
                JOptionPane.showMessageDialog(null, "Pertence a linguagem!");
                
            } else {
                jTextPane1.setForeground(Color.RED);
                JOptionPane.showMessageDialog(null, "Não pertence a linguagem.");
            }
        
       
        


    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String input = JOptionPane.showInputDialog(null, "Digite a entrada:");
        boolean resposta = false;
        resposta = graph.execucaoPassoAPasso(input);
        incr = 0;
        if (resposta) {
            jButton5.setVisible(true);
            JOptionPane.showMessageDialog(null, "Para visualizar a continuação, clique em próximo.");
        } else {
            JOptionPane.showMessageDialog(null, "Não pertence a linguagem.");
        }

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void painelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelMouseClicked

    }//GEN-LAST:event_painelMouseClicked

    private void painelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelMouseReleased

    }//GEN-LAST:event_painelMouseReleased

    private void painelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelMousePressed

    }//GEN-LAST:event_painelMousePressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (graph.deixaVerticeCinza(incr)) {
            view.cleanImage();
            painel.repaint();
            incr++;

        } else {
            JOptionPane.showMessageDialog(null, "Acabou a execução.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        MultiplasEntradas me = new MultiplasEntradas();
        me.setVisible(true);
        me.setGraph(graph);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        //Abrir arquivo
        //jFileChooser1.setVisible(true);
//        aa = new AbrirArquivo();
//        aa.setVisible(true);
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int i = file.showOpenDialog(null);
        if (i == 1) {
            file.setVisible(false);

        } else {
            File arquivo = file.getSelectedFile();
            path = arquivo.getPath();
            // File f = this.jFileChooser1.getSelectedFile();
            // path = f.getPath();
            // this.setVisible(false);
            if (!path.contains(".jff")) {
                JOptionPane.showMessageDialog(null, "Este não é um tipo de arquivo válido, por favor selecione novamente");

//     this.setVisible(true);
            } else {
                try {
                    abreArquivo(path);
                    view.cleanImage();
                    painel.repaint();
                    jMenuItem8.setEnabled(true);

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

//    public void iniciaGrafo(Graph graph) {
//        this.graph = graph;
//        view.cleanImage();
//        painel.repaint();
//    }
    public void printarFita() {
        jTextPane1.setContentType("text/html");
        String html = "";
        html += "<html><body><p style=\"font-size:20pt; \">";
       

        for (int i = 0; i < fita.getConteudo().length; i++) {
            if(i == fita.getPonteiro()){
                html += "<span style=\"background-color: blue;\">"+fita.getConteudo()[i]+"</span>";
            }
            else{
                html += fita.getConteudo()[i];
            }
        }
         html += "</body></html>";
        jTextPane1.setText(html);
    }

    public void abreArquivo(String path) throws FileNotFoundException {
        FileReader fr = new FileReader(path);
        BufferedReader br = new BufferedReader(fr);
        String linha;
        try {
            linha = br.readLine();
            while (linha != null) {
                linha = linha.replace("&#13;", "");
                if (linha.contains("<type>")) {
                    linha = linha.replace("<type>", "");
                    linha = linha.replace("</type>", "");
                    linha = linha.replace(" ", "");
//                    if(!linha.equals("turing")){;
//                        break;
//                    }     JOptionPane.showMessageDialog(null, "Tipo de arquivo não é uma máquina de turing!");
//                        break;
//                    }
                    if (!linha.contains("turing")) {
                        JOptionPane.showMessageDialog(null, "Tipo de arquivo não é uma máquina de turing!");
//                        break;
                    }
                }
                if (linha.contains("<block")) {
                    Vertex v = new Vertex();
                    while (!linha.contains("</block>")) {

                        int inicio = linha.lastIndexOf("name=\"");
                        int fim = linha.lastIndexOf("\">");
                        String id = linha.substring(inicio, fim);
                        id = id.replace("name=\"", "");
                        v.setID(id);

                        //proxima linha é o x
                        linha = br.readLine();
                        linha = linha.replace("&#13;", "");
                        if (linha.contains("<tag>")) {
                            linha = br.readLine();
                            linha = linha.replace("&#13;", "");
                        }

                        linha = linha.replace("<x>", "");
                        linha = linha.replace("</x>", "");
                        float x = Float.parseFloat(linha);
                        v.setX(x);
                        //proxima linha é o y
                        linha = br.readLine();
                        linha = linha.replace("&#13;", "");
                        linha = linha.replace("<y>", "");
                        linha = linha.replace("</y>", "");
                        float y = Float.parseFloat(linha);
                        v.setY(y);

                        linha = br.readLine();
                        linha = linha.replace("&#13;", "");
                        if (linha.contains("<initial")) {
                            v.setInicial(true);
                            linha = br.readLine();
                            linha = linha.replace("&#13;", "");
                        }
                        if (linha.contains("<final")) {
                            v.setEstFinal(true);
                            linha = br.readLine();
                            linha = linha.replace("&#13;", "");

                        }

                    }
                    graph.addVertex(v);
                } else if (linha.contains("<transition>")) {
                    Vertex source = null;
                    Vertex target = null;
                    //proxima linha é o from:
                    linha = br.readLine();
                    linha = linha.replace("&#13;", "");
                    linha = linha.replace("<from>", "");
                    linha = linha.replace("</from>", "");
                    linha = linha.replace(" ", "");

                    int indice = (int) Float.parseFloat(linha);
                    for (int i = 0; i < graph.vertex.size(); i++) {
                        if (indice == graph.vertex.get(i).getPosition()) {
                            source = graph.vertex.get(i);
                        }
                    }
                    //acabei de setar o from, agora é o <to>:
                    linha = br.readLine();
                    linha = linha.replace("&#13;", "");
                    linha = linha.replace("<to>", "");
                    linha = linha.replace("</to>", "");
                    linha = linha.replace(" ", "");
                    indice = (int) Float.parseFloat(linha);
                    for (int i = 0; i < graph.vertex.size(); i++) {
                        if (indice == graph.vertex.get(i).getPosition()) {
                            target = graph.vertex.get(i);
                        }
                    }
                    //acabei de setar  o to, agora a proxima linha é o label:
                    linha = br.readLine();

                    linha = linha.replace("&#13;", "");
                    linha = linha.replace("<read>", "");
                    linha = linha.replace("</read>", "");
                    linha = linha.replace(" ", "");
                    linha = linha.replace("\t", "");
                    String label = linha;

                    linha = br.readLine();
                    linha = linha.replace("&#13;", "");
                    linha = linha.replace("<write>", "");
                    linha = linha.replace("</write>", "");
                    linha = linha.replace(" ", "");
                    linha = linha.replace("\t", "");
                    String fita = linha;

                    linha = br.readLine();
                    linha = linha.replace("&#13;", "");
                    linha = linha.replace("<move>", "");
                    linha = linha.replace("</move>", "");
                    linha = linha.replace(" ", "");
                    linha = linha.replace("\t", "");
                    char direcao = linha.charAt(0);

                    if (label.equals("<read/>")) {
                        label = "VAZIO";
                    }
                    if (fita.equals("<write/>")) {
                        fita = "VAZIO";
                    }
                    Edge edge = new Edge(source, target, label, fita, direcao);
                    graph.addEdge(edge);
                }
                linha = br.readLine();
            }
            contador = graph.vertex.size();
        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void salvarArquivo(String path) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(path));
            FileWriter fw = new FileWriter(path);
            Graph aux = graph;
            String html = "";
            //inicio do arquivo:
            html += "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!--Created with Nakamura and Santos JFlap - 2017.--><structure>\n";

            html += "<type>turing</type>\n"
                    + "  <automaton>\n"
                    + "		<!--The list of states.-->\n";

            //List of States:
            for (int i = 0; i < graph.vertex.size(); i++) {
                html += "   <block id=\"" + i + "\" name=\"" + graph.vertex.get(i).getID() + "\">\n";
                html += "       <tag>" + "Machine" + i + "</tag>\n";
                html += "       <x>" + graph.vertex.get(i).getX() + "</x>\n";
                html += "       <y>" + graph.vertex.get(i).getY() + "</y>\n";
                if (graph.vertex.get(i).isInicial()) {
                    html += "       <initial/>\n";
                }
                if (graph.vertex.get(i).isEstFinal()) {
                    html += "       <final/>\n";
                }
                html += "   </block>\n";
            }

            //List of transitions:
            html += "   <!--The list of transitions.-->\n";

            for (int i = 0; i < graph.edges.size(); i++) {
                for (int j = 0; j < graph.edges.get(i).getValues().size(); j++) {
                    html += "   <transition>\n";
                    html += "       <from>" + graph.edges.get(i).getSource().getPosition() + "</from>\n";
                    html += "       <to>" + graph.edges.get(i).getTarget().getPosition() + "</to>\n";
                    if (graph.edges.get(i).getValues().get(j).getLabel().equals("VAZIO")) {
                        html += "<read/>\n";
                    } else {
                        html += "       <read>" + graph.edges.get(i).getValues().get(j).getLabel() + "</read>\n";
                    }
                    if (graph.edges.get(i).getValues().get(j).getFita().equals("VAZIO")) {
                        html += "<write/>\n";
                    } else {
                        html += "       <write>" + graph.edges.get(i).getValues().get(j).getFita() + "</write>\n";
                    }
                    html += "       <move>" + graph.edges.get(i).getValues().get(j).getSentido() + "</move>\n";

                    html += "   </transition>\n";
                }

            }

            html += "<!--The list of automata-->\n";
            for (int i = 0; i < graph.vertex.size(); i++) {
                html += "<Machine" + i + "/>\n";
            }

            html += " </automaton>\n"
                    + "</structure>";

            fw.write(html);
            JOptionPane.showMessageDialog(null, "Arquivo salvo com sucesso!");
            fw.close();
            bw.close();

        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void salvarArquivoAntigo(String path) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(path));
            FileWriter fw = new FileWriter(path);
            Graph aux = graph;
            String html = "";
            //inicio do arquivo:
            html += "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!--Created with Nakamura and Santos JFlap - 2017.-->\n<structure>\n";
            html += "<type>mealy</type>\n"
                    + "  <automaton>\n"
                    + "		<!--The list of states.-->\n";

            //List of States:
            for (int i = 0; i < graph.vertex.size(); i++) {
                html += "   <state id=\"" + i + "\" name=\"" + graph.vertex.get(i).getID() + "\">\n";
                html += "       <x>" + graph.vertex.get(i).getX() + "</x>\n";
                html += "       <y>" + graph.vertex.get(i).getY() + "</y>\n";
                if (graph.vertex.get(i).isInicial()) {
                    html += "       <initial/>\n";
                }
                if (graph.vertex.get(i).isEstFinal()) {
                    html += "       <final/>\n";
                }
                html += "   </state>\n";
            }

            //List of transitions:
            html += "   <!--The list of transitions.-->\n";

            for (int i = 0; i < graph.edges.size(); i++) {
                for (int j = 0; j < graph.edges.get(i).getValues().size(); j++) {
                    html += "   <transition>\n";
                    html += "       <from>" + graph.edges.get(i).getSource().getPosition() + "</from>\n";
                    html += "       <to>" + graph.edges.get(i).getTarget().getPosition() + "</to>\n";
                    html += "       <read>" + graph.edges.get(i).getValues().get(j).getLabel() + "</read>\n";
                    //html += "       <x>" + graph.edges.get(i).getValues().get(j).getPoint().getX() + "</x>";
                    //html += "       <y>" + graph.edges.get(i).getValues().get(j).getPoint().getY() + "</y>";   
                    html += "   </transition>\n";
                }

            }

            html += " </automaton>\n"
                    + "</structure>";

            fw.write(html);
            JOptionPane.showMessageDialog(null, "Arquivo salvo com sucesso!");
            fw.close();
            bw.close();

        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        //Salvar arquivo
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int abriu = file.showSaveDialog(null);
        //String nomeArquivo = JOptionPane.showInputDialog(null, "Digite o nome do arquivo:");
        String nomeArquivo;
        if (abriu == 1) {
            nomeArquivo = "";
        } else {
            File arquivo = file.getSelectedFile();
            nomeArquivo = arquivo.getPath();
            String path = "";
            if (!nomeArquivo.contains(".jff")) {
                path = nomeArquivo + ".jff";
            }

            salvarArquivo(path);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        //Salvar
        salvarArquivo(path);

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    //considerando que há apenas um único estado final: Funcionando
    private boolean tiverEstadosFinaisNaoMarcados(ArrayList<Edge> arestas) {

        for (int i = 0; i < arestas.size(); i++) {
            if (arestas.get(i).getTarget().isEstFinal() && !arestas.get(i).getTarget().isSelected()) {
                return true;
            }
        }
        return false;
    }

    public class EventoMouse extends MouseAdapter {

        public Edge getTransicao() {
            String string = JOptionPane.showInputDialog(jMenu1, "Transição:", "Digite a Transição:", 0);

            String[] array = string.split(";");
            char sentido = array[2].charAt(0);

            return new Edge(null, null, array[0], array[1], sentido);

        }

        @Override
        public void mouseClicked(MouseEvent evt) {
            //criando estados
            if (select == 1) {
                if (graph == null) {
                    graph = new Graph();
                }
                String nomeVertice = "q" + Integer.toString(contador);
                contador++;
                graph.addVertex(evt.getX(), evt.getY(), nomeVertice);
                view.cleanImage();
                painel.repaint();
            }

            //            
            if (select == 4) {  //Se tiver selecionado o Inciial:

                for (int i = 0; i < graph.vertex.size(); i++) {
                    graph.setInicial(graph.vertex.get(i), false);
                }
                graph.setInicial(view.getSelectedVertex(), true);

                view.cleanImage();
                painel.repaint();

            }
            if (select == 5) {  //Se tiver selecionado o final:

                if (view.getSelectedVertex().isEstFinal()) {
                    graph.setFinal(view.getSelectedVertex(), false);
                } else {
                    graph.setFinal(view.getSelectedVertex(), true);
                }

                view.cleanImage();
                painel.repaint();
            }

            //excluindo estados
            if (select == 3) {
                if (view.getSelectedVertex() != null) {
                    //ou seja tiver um vértice selecionado
                    graph.excluirVertice(view.getSelectedVertex());

                    //            if(graph.vertex.size() == 0)
                    //                graph = null;
                    //            System.out.println("teste");
                    view.cleanImage();
                    painel.repaint();
                }
                if (view.getSelectedTransicao() != null) {
                    //ou seja tiver um vértice selecionado
                    graph.excluirAresta(view.getSelectedTransicao());
                    //            if(graph.vertex.size() == 0)
                    //                graph = null;
                    //            System.out.println("teste");
                    view.cleanImage();
                    painel.repaint();
                }
            }

        }

        @Override
        public void mousePressed(MouseEvent evt) {
            if ((graph != null) && (!graph.vertex.isEmpty())) {
                for (int i = 0; i < graph.vertex.size(); i++) {
                    float x = graph.vertex.get(i).getX(),
                            y = graph.vertex.get(i).getY(),
                            ray = graph.vertex.get(i).getRay();
                    if ((x + ray > evt.getX()) && (x - ray < evt.getX()) && (y + ray > evt.getY()) && (y - ray < evt.getY())) {

                        view.setSelectedVertex(graph.vertex.get(i));
                        //view.setSelectedEdge(null);
                        view.setSelectedTransicao(null);
                        view.getSelectedVertex().setSelected(true);
                        break;
                    }
                }
                if ((graph != null) && (!graph.edges.isEmpty())) {
                    for (int i = 0; i < graph.edges.size(); i++) {
                        //for(int j = 0 ; j < graph.edges.)
                        for (int j = 0; j < graph.edges.get(i).getValues().size(); j++) {
                            float x = (float) graph.edges.get(i).getValues().get(j).getPoint().getX(),
                                    y = (float) graph.edges.get(i).getValues().get(j).getPoint().getY(),
                                    ray = 25;
                            if ((x + ray > evt.getX()) && (x - ray < evt.getX()) && (y + ray > evt.getY()) && (y - ray < evt.getY())) {

                                //view.setSelectedEdge(graph.edges.get(i));
                                view.setSelectedTransicao(graph.edges.get(i).getValues().get(j));
                                view.setSelectedVertex(null);

                                //view.getSelectedEdge().setSelected(true);
                                break;
                            }
                        }
                    }
                }

            }
        }

        @Override
        public void mouseReleased(MouseEvent evt) {
            int origem, destino;

            origem = destino = -1;
            if (select == 2) { //add transição
                view.s.setLine(0, 0, 0, 0);
                for (int i = 0; i < graph.vertex.size(); i++) {
                    if (graph.vertex.get(i).isSelected()) {
                        origem = i;
                        break;
                    }
                }
            }

            //tirar a seleção do estado
            if ((graph != null) && (!graph.vertex.isEmpty()) && (view.getSelectedVertex() != null)) {
                view.getSelectedVertex().setSelected(false);
                view.cleanImage();
                painel.repaint();
            }

            //desenhar transição
            if (select == 2) {

                //verifica onde soltou o mouse pra encontrar o estado destino
                if ((graph != null) && (!graph.vertex.isEmpty())) {
                    for (int i = graph.vertex.size() - 1; i >= 0; i--) {
                        float x = graph.vertex.get(i).getX(),
                                y = graph.vertex.get(i).getY(),
                                ray = graph.vertex.get(i).getRay();
                        if ((x + ray > evt.getX()) && (x - ray < evt.getX()) && (y + ray > evt.getY()) && (y - ray < evt.getY())) {
                            destino = i;
                            break;
                        }
                    }
                }

                //verifica se soltou o mouse em algum estado
                if (destino != -1) {

                    String inputDialog = JOptionPane.showInputDialog(null, "Add Transição: Ex: a;VAZIO;L");

                    if (inputDialog != null) {
                        if (inputDialog.equals("")) {
                            inputDialog = "VAZIO;VAZIO;R";

                        }
                        String[] array = inputDialog.split(";");
                        char direcao = array[2].charAt(0);
                        graph.addEdge(new Edge(graph.vertex.get(origem), graph.vertex.get(destino), array[0], array[1], direcao));

                        origem = destino = -1;

//                        Edge edge = this.getTransicao();
//                        edge.setSource(graph.vertex.get(origem));
//                        edge.setTarget(graph.vertex.get(destino));
//                        graph.addEdge(edge);
                        view.cleanImage();
                        painel.repaint();
                    }
//                    else{
//                        destino = -1;
//                    }
                }
                //se não, não cria a transição

            }
        }

    }

    public class Mouse extends MouseMotionAdapter {

        @Override

        public void mouseDragged(MouseEvent e) { //movimento de arrastar mouse com obtão esquerdo pressionado

            //arrastar estado com botao esquerdo do mouse
            if (select == 0) {
                for (int i = 0; i < graph.vertex.size(); i++) {

                    if (view.selectedVertex.getID().equals(graph.vertex.get(i).getID())) {
                        graph.vertex.get(i).setX(e.getX());
                        graph.vertex.get(i).setY(e.getY());
                        view.cleanImage();
                        painel.repaint();
                        break;
                    }
                }
            }

            if (select == 2) {
//                if(view.getSelectedVertex() != null){
//                    int x1, y1, a;
//                    int x2, y2, x, y;
//                   x1 = Math.round(view.selectedVertex.getX()) ;
//                   y1 = Math.round(view.selectedVertex.getY());
//                   
//                   x2 = e.getX();
//                   y2 = e.getY();
//                   
//                   a = ((y2-y1)/(x2-x1));
//                  for(x = x1; x < x2; x++){
//                    y = a*x - a*x1 + y1;
//                    view.imageBuffer.setRGB(x, y, 100);
//                  }
//                };

                view.s.setLine(e.getX(), e.getY(), view.selectedVertex.getX(), view.selectedVertex.getY());

                view.cleanImage();
                painel.repaint();
//                
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    public final class ViewPanel extends JPanel {

        private java.awt.Color color = java.awt.Color.RED;
        private Vertex markedVertex;
        private Vertex selectedVertex;
        private Edge selectedEdge;
        private Transicao selectedTransicao;
        private ArrayList<Vertex> selectedVertices;
        private BufferedImage imageBuffer;
        Vertex verticeSelecionado = null;
        private Line2D.Float s;

        public ViewPanel() {
            this.setBackground(java.awt.Color.WHITE);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
            s = new Line2D.Float();
        }

        public Edge getSelectedEdge() {
            return selectedEdge;
        }

        public void setSelectedEdge(Edge selectedEdge) {
            this.selectedEdge = selectedEdge;
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);

            if (graph != null && this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(graph.getSize().width + 1,
                        graph.getSize().height + 1, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, graph.getSize().width + 1, graph.getSize().height + 1);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

//                if(view.getSelectedVertex() != null){
//                    int x1, y1, a;
//                    int x2, y2, x, y;
//                   x1 = Math.round(view.selectedVertex.getX()) ;
//                   y1 = Math.round(view.selectedVertex.getY());
//                   
//                   x2 = mouseX;
//                   y2 = mouseY;
//                   
//                   a = ((y2-y1)/(x2-x1));
//                  for(x = x1; x < x2; x++){
//                    y = a*x - a*x1 + y1;
//                    imageBuffer.setRGB(x, y, 100);
//                    imageBuffer.dr
//                  }
//                }             
                graph.draw(g2Buffer);
                if (view.s != null) {
                    g2Buffer.setStroke(new java.awt.BasicStroke(1.0f));
                    g2Buffer.draw(view.s);
                }
//                Shape line;
//                line = new Shape() {
//                    @Override
//                    public Rectangle getBounds() {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public Rectangle2D getBounds2D() {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean contains(double x, double y) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean contains(Point2D p) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean intersects(double x, double y, double w, double h) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean intersects(Rectangle2D r) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean contains(double x, double y, double w, double h) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public boolean contains(Rectangle2D r) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public PathIterator getPathIterator(AffineTransform at) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//
//                    @Override
//                    public PathIterator getPathIterator(AffineTransform at, double flatness) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                    }
//                };

//                if(view.getSelectedVertex() != null )
//                g2Buffer.drawLine(Math.round(view.selectedVertex.getX()), Math.round(view.selectedVertex.getY()), mouseX, mouseY);
//                
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                ImageIO.write(this.imageBuffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void setGraph(Graph graph) {
            if (graph != null) {
                this.setPreferredSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));
                this.setSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));

                this.cleanImage();
                this.repaint();
            }
        }

        public Vertex getMarkedVertex() {
            return markedVertex;
        }

        public void cleanImage() {
            this.imageBuffer = null;
        }

        public void adjustPanel() {
            float iniX = graph.getVertex().get(0).getX();
            float iniY = graph.getVertex().get(0).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = graph.getVertex().get(0).getRay() * 5 + 10;

            for (int i = 1; i < graph.getVertex().size(); i++) {
                float x = graph.getVertex().get(i).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = graph.getVertex().get(i).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (Vertex v : graph.getVertex()) {
                v.setX(v.getX() + zero - min_x);
                v.setY(v.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            this.setSize(d);
            this.setPreferredSize(d);
        }

        public void markVertices(ArrayList<Vertex> vertices) {
            if (vertices != null) {
                this.cleanMarkedVertices(false);

                for (Vertex v : vertices) {
                    v.setSelected(true);
                }
                this.cleanImage();
                this.repaint();
            }
        }

        public void cleanMarkedVertices(boolean cleanVertex) {
            if (graph != null) {
                this.markedVertex = null;

                for (Vertex vertex : graph.getVertex()) {
                    vertex.setSelected(false);
                }
            }

            this.cleanImage();
            this.repaint();
        }

        @Override
        public void setFont(java.awt.Font font) {

        }

        @Override
        public java.awt.Font getFont() {
            return null;
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

        }

        public Vertex getSelectedVertex() {
            return selectedVertex;
        }

        public void setSelectedVertex(Vertex selectedVertex) {
            this.selectedVertex = selectedVertex;
        }

        public Transicao getSelectedTransicao() {
            return selectedTransicao;
        }

        public void setSelectedTransicao(Transicao selectedTransicao) {
            this.selectedTransicao = selectedTransicao;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Inicial;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JScrollPane painel;
    private javax.swing.JLabel respostaText;
    // End of variables declaration//GEN-END:variables
}
