/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Automato.visual;

import Grafos.desenho.Edge;
import Grafos.desenho.Graph;
import Grafos.desenho.Vertex;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ejcomp
 */
public class AbrirArquivo extends javax.swing.JFrame {

    public String path;
    public Graph graph;
    public boolean executou;
    /**
     * Creates new form AbrirArquivo
     */
    public AbrirArquivo() {
        executou = false;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
             // TODO add your handling code here:
        String ab = "";

        ab = evt.getActionCommand();
        if (ab.equals("CancelSelection")) {
            this.setVisible(false);
        }
        if (ab.equals("ApproveSelection")) {
            File f = this.jFileChooser1.getSelectedFile();
            path = f.getPath();
            this.setVisible(false);
            if (!path.contains(".jff")) {
                JOptionPane.showMessageDialog(null, "Este não é um tipo de arquivo válido, por favor selecione novamente");
                this.setVisible(true);
            } else {
                try {
                    abreArquivo(path);
                    executou = true;
                    this.setVisible(false);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
       
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    public Graph retornaGrafo(){
        return graph;
    }
    
   public void abreArquivo(String path) throws FileNotFoundException {
       
       
        FileReader fr = new FileReader(path);
        BufferedReader br = new BufferedReader(fr);
        try {
            String linha = br.readLine();
            while (linha != null) {

                if (linha.contains("<state")) {
                    Vertex v = new Vertex();
                    while (!linha.contains("</state>")) {

                        int inicio = linha.lastIndexOf("name=\"");
                        int fim = linha.lastIndexOf("\">");
                        String id = linha.substring(inicio, fim);
                        id = id.replace("name=\"", "");
                        v.setID(id);
                        //proxima linha é o x
                        linha = br.readLine();
                        linha = linha.replace("<x>", "");
                        linha = linha.replace("</x>", "");
                        float x = Float.parseFloat(linha);
                        v.setX(x);
                        //proxima linha é o y
                        linha = br.readLine();

                        linha = linha.replace("<y>", "");
                        linha = linha.replace("</y>", "");
                        float y = Float.parseFloat(linha);
                        v.setX(y);

                        linha = br.readLine();

                        if (linha.contains("<initial")) {
                            v.setInicial(true);
                            linha = br.readLine();
                        }
                        if (linha.contains("<final")) {
                            v.setEstFinal(true);
                            linha = br.readLine();

                        }

                    }
                    graph.addVertex(v);
                } else if (linha.contains("<transition>")) {
                    Vertex source = null;
                    Vertex target = null;
                    //proxima linha é o from:
                    linha = br.readLine();
                    linha = linha.replace("<from>", "");
                    linha = linha.replace("</from>", "");
                    linha = linha.replace(" ", "");

                    int indice = Integer.parseInt(linha);
                    for (int i = 0; i < graph.vertex.size(); i++) {
                        if (indice == graph.vertex.get(i).getPosition()) {
                            source = graph.vertex.get(i);
                        }
                    }
                    //acabei de setar o from, agora é o <to>:
                    linha = br.readLine();
                    linha = linha.replace("<to>", "");
                    linha = linha.replace("</to>", "");
                    linha = linha.replace(" ", "");
                    indice = Integer.parseInt(linha);
                    for (int i = 0; i < graph.vertex.size(); i++) {
                        if (indice == graph.vertex.get(i).getPosition()) {
                            target = graph.vertex.get(i);
                        }
                    }
                    //acabei de setar  o to, agora a proxima linha é o label:
                    linha = br.readLine();
                    linha = linha.replace("<read>", "");
                    linha = linha.replace("</read>", "");
                    linha = linha.replace(" ", "");
                    String label = linha;
                    Edge edge = new Edge(source, target, label);
                    graph.addEdge(edge);
                }
                linha = br.readLine();
            }

        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbrirArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbrirArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbrirArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbrirArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbrirArquivo().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
